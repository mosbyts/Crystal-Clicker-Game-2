{"version":3,"sources":["components/Card/index.js","components/Container/index.js","components/Footer/index.js","components/Header/index.js","App.js","index.js"],"names":["Card","props","className","alt","name","src","image","key","id","onClick","game","Container","fluid","Footer","Header","score","losses","App","state","crystals","clicked","randomizeCrystals","value","Math","floor","random","checkClick","onclick","push","updateScore","setState","updateLosses","resetGame","this","map","crystal","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qmCAgBeA,G,MAbF,SAAAC,GACT,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,IAAKN,EAAMO,GAAIC,QAAW,kBAAMR,EAAMS,KAAKT,EAAMO,KAAKN,UAAU,YAE1G,yBAAKA,UAAU,eACT,2BAAG,gCAASD,EAAMG,WCAjBO,MARf,SAAmBV,GACjB,OACE,yBAAKC,UAAU,cACb,uCAAKA,UAAS,mBAAcD,EAAMW,MAAQ,SAAW,KAAUX,M,MCQtDY,MAVf,WACI,OACI,4BAAQX,UAAU,8BACd,yBAAKA,UAAU,yBACX,2ECQDY,G,MAZA,SAAAb,GAAK,OACZ,6BACI,yBAAKC,UAAU,iDACX,uDAEJ,yBAAKA,UAAU,aACX,sCAAYD,EAAMc,OAClB,uCAAad,EAAMe,Y,OCsEpBC,E,2MAvEbC,MAAM,CACJC,SAAUA,EACVJ,MAAO,EACPC,OAAQ,EACRI,QAAS,I,EAOXC,kBAAoB,WAClB,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAW,GACzC,OAAON,EAASG,I,EAGlBI,WAAa,WAEXC,QAAQ,EAAKC,KADG,M,EAIlBC,YAAc,WACZ,EAAKC,SAAS,CAACf,MAAO,EAAKG,MAAMH,MAAQ,K,EAG3CgB,aAAe,WACb,EAAKD,SAAS,CAACd,OAAQ,EAAKE,MAAMF,OAAS,K,EAG7CgB,UAAY,WACV,EAAKX,oBACL,EAAKS,SAAS,CACZX,SAAUA,EACVJ,MAAO,EACPK,QAAS,M,EAIbV,KAAO,WACF,EAAKQ,MAAME,UAAYD,EAASX,IACjC,EAAKuB,eACL,EAAKC,aAEL,EAAKH,e,kFAnCPI,KAAKD,c,+BAuCE,IAAD,OACN,OACE,6BACE,kBAAC,EAAD,CACIjB,MAAOkB,KAAKf,MAAMH,MAClBC,OAAQiB,KAAKf,MAAMF,SAErB,kBAAC,EAAD,KACGiB,KAAKf,MAAMC,SAASe,KAAI,SAAAC,GAAO,OAC9B,kBAAC,EAAD,CACE3B,GAAI2B,EAAQ3B,GACZD,IAAK4B,EAAQ3B,GACbJ,KAAM+B,EAAQ/B,KACdE,MAAO6B,EAAQ7B,MACfc,QAAS,EAAKA,cAItB,kBAAC,EAAD,W,GAnEUgB,IAAMC,WCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.8f020fc0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Card = props => {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"img-container\">\r\n          <img alt={props.name} src={props.image} key={props.id} onClick = {() => props.game(props.id)} className=\"remove\"></img>\r\n        </div>\r\n        <div className=\"crystalName\">\r\n              <p><strong>{props.name}</strong></p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return (\r\n    <div className=\"card-group\">\r\n      <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(){\r\n    return(\r\n        <footer className=\"py-4 bg-dark text-white-50\">\r\n            <div className=\"container text-center\">\r\n                <small>Copyright &copy; Crystal Clicker Game 2</small>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = props => (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <h1>Crystal Clicker Game 2</h1>\r\n            </nav>\r\n            <div className=\"container\">\r\n                <h5>Score: {props.score}</h5>\r\n                <h5>Losses: {props.losses}</h5>\r\n            </div>\r\n        </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\nimport Card from \"./components/Card\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport crystals from \"./crystals.json\";\n\nclass App extends React.Component {\n\n  state={\n    crystals: crystals,\n    score: 0,\n    losses: 0,\n    clicked: []\n  };\n\n  compoundDidMount(){\n    this.resetGame();\n  }\n\n  randomizeCrystals = () => {\n    const value = Math.floor(Math.random() + 1);\n    return crystals[value];\n  }\n\n  checkClick = () => {\n    const clicked = [];\n    onclick(this.push(clicked));\n  }\n\n  updateScore = () => {\n    this.setState({score: this.state.score + 1});\n  }\n\n  updateLosses = () => {\n    this.setState({losses: this.state.losses + 1});\n  }\n\n  resetGame = () => {\n    this.randomizeCrystals();\n    this.setState({\n      crystals: crystals,\n      score: 0,\n      clicked: [],\n    });\n  }\n\n  game = () => {\n    if(this.state.clicked === crystals.id){\n      this.updateLosses();\n      this.resetGame();\n    } else {\n      this.updateScore();\n    };\n  }\n\n  render(){\n    return(\n      <div>\n        <Header \n            score={this.state.score}\n            losses={this.state.losses}\n        />\n          <Container>\n            {this.state.crystals.map(crystal => (\n              <Card \n                id={crystal.id}\n                key={crystal.id}\n                name={crystal.name}\n                image={crystal.image}\n                clicked={this.clicked}\n              />\n            ))}\n          </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}